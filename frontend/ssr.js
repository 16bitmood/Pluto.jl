import { html, render_html, createUndomRenderer } from "./imports/Preact.js"
import { useEffect, useState, useRef, Component } from "./imports/Preact.js"

window.pluto_notebook_id = undefined
window.pluto_isolated_cell_ids = undefined
window.pluto_notebookfile =
    "data:text/julia;charset=utf-8;base64,"
window.pluto_disable_ui = true
window.pluto_slider_server_url = undefined
window.pluto_statefile =
    "data:;base64,"

// preact component that count the number of times it has been clicked
// and renders the number of clicks in a div
const Counter = () => {
    const [clicks, set_clicks] = useState(0)
    return html`<div>${clicks}</div>
        <button onClick=${() => set_clicks(clicks + 1)}>Click me</button>`
}

class Wtf extends Component {
    render() {
        return html`<div>
            <h1>Hello World</h1>
            <${Counter} />
        </div>`
    }
}

let renderer = createUndomRenderer()

renderer.render(
    html`<p>asdf</p>
        <${Wtf} />`
)

console.log(renderer.html())
// setTimeout(() => {
//     console.log(renderer.html())
// }, 2000)

// window.document = new Proxy(
//     { addEventListener: () => {}, body: { style: {}, classList: { toggle: () => {} } }, documentElement: { style: {} } },
//     { get: (target, prop) => (prop in target ? target[prop] : {}) }
// )
// window.HTMLElement = EventTarget
// window.customElements = { define: () => {} }

// const { Editor } = await import("./components/Editor.js")

// window.document = undefined
// window.HTMLElement = undefined
// window.customElements = undefined

// console.log(render_html(html`<${Editor} />`))
